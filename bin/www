#!/usr/bin/env node
var fs = require('fs');
var IS_PROD = process.env.NODE_ENV === "production";
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('aionhelperserver:server');
var http = IS_PROD ? require('https') : require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(IS_PROD ? '8088' : '3000');
app.set('port', port);
console.info('port', port)

/**
 * Create HTTP server.
 */
var options;
if(IS_PROD){
  options = {
    key: fs.readFileSync('/app/cert/privkey.pem'),
    cert: fs.readFileSync('/app/cert/cert.pem')
  };
}


var server = IS_PROD ? http.createServer(options, app) :  http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.info('bind', bind)
  if(!IS_PROD){
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}
