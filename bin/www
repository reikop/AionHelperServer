#!/usr/bin/env node
var fs = require('fs');
var args = require('args-parser')(process.argv);
var IS_SSL = args.sslkey && args.sslkey;

/**
 * Module dependencies.
 */

var app = require('../app');

var http = IS_SSL ? require('https') : require('http');

/**
 * Get port from environment and store in Express.
 */

var port = 8081
app.set('port', port);

/**
 * Create HTTP server.
 */
var options;
if(IS_SSL){
  options = {
    key: fs.readFileSync(args.sslkey),
    cert: fs.readFileSync(args.sslcert)
  };
}


var server = IS_SSL ? http.createServer(options, app) :  http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  // if(!IS_SSL){
  //   var debug = require('debug')('aionhelperserver:server');
  //   var addr = server.address();
  //   var bind = typeof addr === 'string'
  //     ? 'pipe ' + addr
  //     : 'port ' + addr.port;
  //   debug('Listening on ' + bind);
  // }
}
